#include <Loci.h>
#include <iostream>
$include "hydro.lh"

using namespace std ;

int main(int argc, char *argv[])
{
  // Initialize Loci
  Loci::Init(&argc,&argv) ;

  // Setup exceptions so program aborts on floating point exceptions
  set_fpe_abort() ;

  // query for this variable by default
  std::string query = "solution" ;

  // Use -q queryvar to make alternative queries
  for (int i=1; i<argc; i++) {
    if (!strcmp(argv[i], "-q") && (i+1) < argc) {
      query = argv[i+1];
      for (int j=0; j<argc-i-2; j++) {
	argv[i+j] = argv[i+j+2];
      }
      argc -= 2;
      i--;
    } if(argv[i][0] == '-') {
      std::cerr << "argument " << argv[i] << " is not understood."
		<< std::endl;
    }
  }      

  try {
    //-----------------------------------------------------------------
    // Create Rule Database
    //-----------------------------------------------------------------
    rule_db rdb ;
    rdb.add_rules(global_rule_list) ;
    // Load module of finite-volume helper rules
    //    Loci::load_module("fvm",rdb) ;
    
    //-----------------------------------------------------------------
    // Create Fact Database
    //-----------------------------------------------------------------
    fact_db facts ;
    
    if(argc <= 1) {
      cerr << "must provide case name as argument" << endl ;
      Loci::Abort() ;
    }
    string casename = argv[1] ;
    string varsFile = casename + ".vars" ;
    facts.read_vars(varsFile,rdb) ;
    
    // Read in the XDR file
    string gridFile = casename + ".vog" ;
    if(!Loci::setupFVMGrid(facts,gridFile)) {
      cerr << "unable to read grid file '" << gridFile << "'" << endl ;
      Loci::Abort() ;
    }
    
    setupBoundaryConditions(facts) ;
    
    createLowerUpper(facts) ;

    setup_hexahedra_map(facts) ;
    
    param<std::string> modelName ;
    *modelName = string(casename) ;
    facts.create_fact("modelName",modelName) ;

    // Query Loci for fact derived fact 'solution'
    Loci::makeQuery(rdb,facts,query) ;
  }
  catch(Loci::BasicException x) { // If Loci had an exception
    cerr << "an exception was encountered: " << endl ;
    x.Print(cerr) ;
  }
  catch(...) {
    cerr << "an unexpected exception was encountered" << endl ;
  }
  
  Loci::Finalize() ;
  return 0;
}
  
